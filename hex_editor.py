# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'hex_editor.ui'
#
# Created by: PyQt5 UI code generator 5.15.3
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QTextCursor, QTextCharFormat
from highlighter import Highlighter

from PyQt5.QtCore import *
from PyQt5.QtGui import *
import style_sheets
import random
import string
import utils

HEX_TEXT_INDENTATION=0

def generate_random_hex(n):
    numbers=[]
    for i in range(n):
        numbers.append(random.randint(0,255))
    return numbers


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1050, 600)
        self.mainWindow = MainWindow

        self.initMode=True

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())

        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(950, 600))
        MainWindow.setMaximumSize(QtCore.QSize(950, 600))

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setEnabled(True)
        self.centralwidget.setMouseTracking(True)
        self.centralwidget.setAutoFillBackground(False)
        self.centralwidget.setObjectName("centralwidget")

        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")

        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.textOffset = QtWidgets.QTextEdit(self.centralwidget)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.textOffset.sizePolicy().hasHeightForWidth())

        font = QtGui.QFont('Terminal',10,weight=50)

        # TEXT OFFSET CONFIG
        
        self.textOffset.setSizePolicy(sizePolicy)
        self.textOffset.setObjectName("textOffset")
        self.gridLayout_2.addWidget(self.textOffset, 0, 1, 1, 1)
        self.textOffset.setFont(font)
        self.textOffset.setReadOnly(True)
        #self.offsetHighlighter = Highlighter(self.textOffset.document())

        # TEXT ASCII OFFSET CONFIG
        self.textAsciiOffset = QtWidgets.QTextEdit(self.centralwidget)
        self.textAsciiOffset.setSizePolicy(sizePolicy)
        self.textAsciiOffset.setObjectName('textAsciiOffset')
        self.gridLayout_2.addWidget(self.textAsciiOffset, 0, 2, 1, 1)
        self.textAsciiOffset.setReadOnly(True)
        self.textAsciiOffset.setFont(font)

        # TEXT ASCII VALUE CONFIG
        self.textAsciValue = QtWidgets.QTextEdit(self.centralwidget)
        self.textAsciValue.setObjectName("textAsciValue")
        self.gridLayout_2.addWidget(self.textAsciValue, 1, 2, 1, 1)
        #self.asciiHighlighter = Highlighter(self.textAsciValue.document())
        self.textAsciValue.setFont(font)
        self.textAsciValue.setReadOnly(True)
        self.textAsciValue.verticalScrollBar().setStyleSheet(style_sheets.verticalScrollBarStyle)


        # TEXT SEGMENT CONFIG
        self.textSegment = QtWidgets.QTextEdit(self.centralwidget)
        self.textSegment.setObjectName("textSegment")
        self.gridLayout_2.addWidget(self.textSegment, 1, 0, 1, 1)
        self.textSegment.setFont(font)
        self.textSegment.setReadOnly(True)
        #self.segmentHighligther = Highlighter(self.textSegment.document())
        self.textSegment.verticalScrollBar().setStyleSheet('QScrollBar {width:0px;}')


        # TEXT HEX VALUE CONFIG
        self.textHexValue = QtWidgets.QTextEdit(self.centralwidget)
        self.textHexValue.setObjectName("textHexValue")
        self.gridLayout_2.addWidget(self.textHexValue, 1, 1, 1, 1)
        #self.hexValueHighlighter = Highlighter(self.textHexValue.document())
        self.textHexValue.setFont(font)
        self.textHexValue.verticalScrollBar().setStyleSheet('QScrollBar {width:0px;}') 
        self.textHexValue.selectionChanged.connect(self.hexValueSelectedBehavior)
        self.textHexValue.cursorPositionChanged.connect(self.hexValueCursorBehavior)
        self.textHexValue.setReadOnly(True)

        self.gridLayout_2.setColumnMinimumWidth(0, 1)
        self.gridLayout_2.setColumnMinimumWidth(1, 3)
        self.gridLayout_2.setColumnMinimumWidth(2, 1)
        self.gridLayout_2.setRowMinimumHeight(0, 1)
        self.gridLayout_2.setRowMinimumHeight(1, 16)
        self.gridLayout_2.setColumnStretch(0, 3)
        self.gridLayout_2.setColumnStretch(1, 16)
        self.gridLayout_2.setColumnStretch(2, 4)
        self.gridLayout_2.setRowStretch(0, 1)
        self.gridLayout_2.setRowStretch(1, 18)

        self.verticalLayout.addLayout(self.gridLayout_2)

        MainWindow.setCentralWidget(self.centralwidget)
        # MENU BAR
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1000, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        # self.menuHelp = QtWidgets.QMenu(self.menubar)
        # self.menuHelp.setObjectName("menuHelp")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        MainWindow.setMenuBar(self.menubar)

        # MENU BAR - ACTION BUTTONS
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionExit)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        # self.menubar.addAction(self.menuHelp.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())

        self.actionOpen.triggered.connect(self.openFileClick)
        self.actionSave.triggered.connect(self.saveFileClick)
        self.actionExit.triggered.connect(self.closeApp)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #self.setLightTheme()
        self.printOffset()
        self.printAsciiOffset()
        self.syncScrollBars()

    def openFileClick(self,s):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        file_path, _ = QFileDialog.getOpenFileName(self.centralwidget,'Open file','','','All files (*);',options=options)
        data = None
        with open(file_path, 'rb') as file:
            data = file.read()

        self.loadFile(data)

    def saveFileClick(self,s):
        hex_string = self.textHexValue.toPlainText()
        hex_bytes = utils.string_to_hex(hex_string)
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.DontUseNativeDialog
        file_path,_ =  QFileDialog.getSaveFileName(self.centralwidget,'Save file','','','All files (*)',options=options)
        if file_path:
            with open(file_path,'wb') as file:
                file.write(hex_bytes)
        else:
            print('File saving canceled')
        #print(hex_values)

    def closeApp(self,s):
        self.mainWindow.close()
        

    def keyPressEvent(self, e):
        if e.key() == Qt.Key_Escape:
            self.close()

    def hexValueSelectedBehavior(self):
        print('Selection Behaviour')


    def hexValueCursorBehavior(self):
        # asciiCursor = self.textAsciValue.textCursor()
        print('Cursor Behaviour')
        hexCursor = self.textHexValue.textCursor()
        hexCursor.movePosition(hexCursor.StartOfWord, hexCursor.MoveAnchor)
        hexCursor.movePosition(hexCursor.EndOfWord, hexCursor.KeepAnchor)

        if len(hexCursor.selectedText()) > 2:
            pos = hexCursor.position()
            hexCursor.setPosition(pos-2,QTextCursor.MoveMode.MoveAnchor)
            hexCursor.movePosition(QTextCursor.MoveOperation.StartOfWord, QTextCursor.MoveMode.MoveAnchor)
            hexCursor.movePosition(QTextCursor.MoveOperation.EndOfWord, QTextCursor.MoveMode.KeepAnchor)


        self.textHexValue.setTextCursor(hexCursor)
        #selectedHexValueText = hexCursor.selectedText()

        if hexCursor.hasSelection() == True:
            selection_start_pos = hexCursor.selectionStart()
            selection_end_pos = hexCursor.selectionEnd()
            selection_row = selection_start_pos//81
            selection_column = utils.get_selection_column(selection_start_pos%81)

            self.triggerSegmentSelection(selection_row)
            self.triggerOffsetSelection(selection_start_pos%81, selection_end_pos%81)
            self.triggerAsciiSelection(selection_row,selection_column)
            self.triggerAsciiOffsetSelection(selection_column)
            # print('Start:',selection_start_pos%41)
            # print('End:',selection_end_pos)
            # print('*'*10)
        else:
            cursor = self.textAsciiOffset.textCursor()
            cursor.clearSelection()
            self.textAsciiOffset.setTextCursor(cursor)

            cursor = self.textAsciValue.textCursor()
            cursor.clearSelection()
            self.textAsciValue.setTextCursor(cursor)
            
            cursor = self.textSegment.textCursor()
            cursor.clearSelection()
            self.textSegment.setTextCursor(cursor)

            cursor = self.textOffset.textCursor()
            cursor.clearSelection()
            self.textOffset.setTextCursor(cursor)
        # print('Slected value:',selectedHexValueText)

    def triggerSegmentSelection(self, row):
        # print('Segment Selection')
        # print(f'Segment row={row}')
        cursor = self.textSegment.textCursor()
        cursor.clearSelection()
        cursor.setPosition(row*15, QTextCursor.MoveMode.MoveAnchor)
        cursor.movePosition(QTextCursor.MoveOperation.EndOfLine, QTextCursor.MoveMode.KeepAnchor)
        self.textSegment.setTextCursor(cursor)

    def triggerOffsetSelection(self,begin,end):
        cursor = self.textOffset.textCursor()
        cursor.clearSelection()
        cursor.setPosition(begin,QTextCursor.MoveMode.MoveAnchor)
        cursor.setPosition(end, QTextCursor.MoveMode.KeepAnchor)
        self.textOffset.setTextCursor(cursor)

    def triggerAsciiOffsetSelection(self,column):
        cursor = self.textAsciiOffset.textCursor()
        cursor.clearSelection()
        cursor.setPosition(column,QTextCursor.MoveMode.MoveAnchor)
        cursor.movePosition(QTextCursor.MoveOperation.Right, QTextCursor.MoveMode.KeepAnchor)
        self.textAsciiOffset.setTextCursor(cursor)

    def triggerAsciiSelection(self,row,column):
        cursor = self.textAsciValue.textCursor()
        cursor.clearSelection()
        cursor.setPosition(row*17 + column, QTextCursor.MoveMode.MoveAnchor)
        cursor.movePosition(QTextCursor.MoveOperation.Right, QTextCursor.MoveMode.KeepAnchor)
        self.textAsciValue.setTextCursor(cursor)
        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Hex Editor"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.menuView.setTitle(_translate("MainWindow", "View"))
        #self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.menuAbout.setTitle(_translate("MainWindow", "About"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))

    def loadFile(self, data):
        #numbers = generate_random_hex(1647)
        numbers = data
        self.printSegment(len(numbers))
        self.printHex(numbers)
        self.printAscii(numbers)

    def printOffset(self):
        offset_text = ' '*HEX_TEXT_INDENTATION
        for i in range(8):
            offset_text+= ' 0' + hex(i)[2:] + ' |'
        offset_text = offset_text[:-1]
        offset_text+=' '*2
        for i in range(8,16):
            offset_text+= ' 0' + hex(i)[2:] + ' |'
        self.textOffset.setText(offset_text[:-1].upper())

    def printAsciiOffset(self):
        offset_text=''
        for i in range(16):
            offset_text+=hex(i)[2:]
        self.textAsciiOffset.setText(offset_text.upper())

    def printSegment(self, number_of_bytes):
        number_of_segments = number_of_bytes // 16 + 1
        segment_text = ''
        for i in range(number_of_segments):
            segment_text = '\n'.join([segment_text,'{0:#0{1}X}0'.format(i,13)])
        self.textSegment.setText(segment_text[1:])

    def printHex(self,numbers):    
        num_rows = len(numbers)//16
        last_row = len(numbers)%16
        hex_string = ''
        for i in range(num_rows):
            row_string=' '*HEX_TEXT_INDENTATION
            for j in range(8):
                hex_num = hex(numbers[16*i + j])[2:]
                hex_num = hex_num.zfill(2) # if we got a number smaller than 0x10 we need to  fill one 0  f -> 0f
                row_string = ' '.join([row_string,hex_num.upper(),' '])
            row_string= row_string[:-1]
            row_string+= ' '*2

            for j in range(8,16):
                hex_num = hex(numbers[16*i + j])[2:]
                hex_num = hex_num.zfill(2) # if we got a number smaller than 0x10 we need to  fill one 0  f -> 0f
                row_string = ' '.join([row_string,hex_num.upper(),' '])
            row_string= row_string[:-1]
            hex_string='\n'.join([hex_string,row_string])

        row_string=' '*HEX_TEXT_INDENTATION
        for i in range(8 if last_row>8 else last_row):
            hex_num = hex(numbers[16*num_rows+i])[2:]
            hex_num = hex_num.zfill(2)
            row_string = ' '.join([row_string, hex_num.upper(),' '])

        if last_row>8:
            row_string= row_string[:-1]
            row_string+= ' '*2

            for j in range(8,last_row):
                hex_num = hex(numbers[16*num_rows + j])[2:]
                hex_num = hex_num.zfill(2) # if we got a number smaller than 0x10 we need to  fill one 0  f -> 0f
                row_string = ' '.join([row_string,hex_num.upper(),' '])

        row_string = row_string[:-1]
        hex_string='\n'.join([hex_string,row_string])
        hex_string = hex_string[1:]
        self.textHexValue.setText(hex_string)

    def printAscii(self,numbers):
        ascii_str=''
        num_rows = len(numbers)//16
        last_row = len(numbers)%16
        printable = set(string.printable)

        for i in range(num_rows):
            row_str=''
            for j in range(16):
                char = chr(numbers[i*16+j])
                char = char if char in string.printable else '.'
                row_str += char

            row_str = row_str.replace('\n','&')
            row_str = row_str.replace('\r\n','')
            row_str = row_str.replace('\r','.')
            # row_str = row_str.replace(' ','')
            row_str = row_str.replace('\t','.')
            row_str = row_str.replace('\v','.')
            row_str = row_str.replace('\f','.')
            ascii_str = '\n'.join([ascii_str,row_str])

        row_str=''
        for i in range(last_row):
            char = chr(numbers[16*num_rows+i])
            char = char if char in string.printable else '.'
            row_str += char

        row_str = row_str.replace('\n','&')
        row_str = row_str.replace('\r\n','')
        row_str = row_str.replace('\r','.')
        # row_str = row_str.replace(' ','')
        row_str = row_str.replace('\t','.')
        row_str = row_str.replace('\v','.')
        row_str = row_str.replace('\f','.')
        
        ascii_str='\n'.join([ascii_str,row_str])
        ascii_str=ascii_str[1:]
        self.textAsciValue.setText(ascii_str.encode('ascii',errors='replace').decode('ascii',errors='replace'))

    def syncScrollBars(self):
        segmentScrollBar = self.textSegment.verticalScrollBar()
        hexValScrollBar = self.textHexValue.verticalScrollBar()
        asciiValueScrollBar = self.textAsciValue.verticalScrollBar()

        segmentScrollBar.valueChanged.connect(lambda value: self.setScrollBars(value))
        hexValScrollBar.valueChanged.connect(lambda value: self.setScrollBars(value))
        asciiValueScrollBar.valueChanged.connect(lambda value: self.setScrollBars(value))

    def setScrollBars(self, value):
        segmentScrollBar = self.textSegment.verticalScrollBar()
        hexValScrollBar = self.textHexValue.verticalScrollBar()
        asciiValueScrollBar = self.textAsciValue.verticalScrollBar()

        segmentScrollBar.setValue(value)
        hexValScrollBar.setValue(value)
        asciiValueScrollBar.setValue(value)

    def setLightTheme(self):
        print('Set light theme')
        self.textAsciiOffset.setStyleSheet(style_sheets.textEditLightStyle)
        self.textAsciValue.setStyleSheet(style_sheets.textEditLightStyle)
        self.textHexValue.setStyleSheet(style_sheets.textEditLightStyle)
        self.textOffset.setStyleSheet(style_sheets.textEditLightStyle)
        self.textSegment.setStyleSheet(style_sheets.textEditLightStyle)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
