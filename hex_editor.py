# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'hex_editor.ui'
#
# Created by: PyQt5 UI code generator 5.15.3
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QShortcut, QTextEdit
from PyQt5.QtGui import QTextCursor, QTextCharFormat, QMouseEvent
from highlighter import Highlighter

from PyQt5.QtCore import *
from PyQt5.QtGui import *
import style_sheets
import random
import string
import utils

HEX_TEXT_INDENTATION=0

def generate_random_hex(n):
    numbers=[]
    for i in range(n):
        numbers.append(random.randint(0,255))
    return numbers


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1050, 600)
        self.mainWindow = MainWindow
        self.mainWindow.keyPressEvent = self.hexKeyPressEvent

        self.initMode=True
        self.focus=''

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())

        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(950, 600))
        MainWindow.setMaximumSize(QtCore.QSize(950, 600))

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setEnabled(True)
        self.centralwidget.setMouseTracking(True)
        self.centralwidget.setAutoFillBackground(False)
        self.centralwidget.setObjectName("centralwidget")

        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")

        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.textOffset = QtWidgets.QTextEdit(self.centralwidget)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.textOffset.sizePolicy().hasHeightForWidth())

        font = QtGui.QFont('Terminal',10,weight=50)

        # TEXT OFFSET CONFIG
        self.textOffset.setSizePolicy(sizePolicy)
        self.textOffset.setObjectName("textOffset")
        self.gridLayout_2.addWidget(self.textOffset, 0, 1, 1, 1)
        self.textOffset.setFont(font)
        self.textOffset.setReadOnly(False)
        self.textOffset.focusInEvent = self.offsetFocusInEvent
        #self.offsetHighlighter = Highlighter(self.textOffset.document())

        # TEXT ASCII OFFSET CONFIG
        self.textAsciiOffset = QtWidgets.QTextEdit(self.centralwidget)
        self.textAsciiOffset.setSizePolicy(sizePolicy)
        self.textAsciiOffset.setObjectName('textAsciiOffset')
        self.gridLayout_2.addWidget(self.textAsciiOffset, 0, 2, 1, 1)
        self.textAsciiOffset.setReadOnly(False)
        self.textAsciiOffset.setFont(font)

        # TEXT ASCII VALUE CONFIG
        self.textAsciValue = QtWidgets.QTextEdit(self.centralwidget)
        self.textAsciValue.setObjectName("textAsciValue")
        self.gridLayout_2.addWidget(self.textAsciValue, 1, 2, 1, 1)
        #self.asciiHighlighter = Highlighter(self.textAsciValue.document())
        self.textAsciValue.setFont(font)
        self.textAsciValue.mousePressEvent = self.asciiClickInEvent
        self.textAsciValue.keyPressEvent = self.asciiKeyPressEvent
        self.textAsciValue.setReadOnly(False)
        self.textAsciValue.verticalScrollBar().setStyleSheet(style_sheets.verticalScrollBarStyle)
        self.textAsciValue.setOverwriteMode(True)

        # TEXT SEGMENT CONFIG
        self.textSegment = QtWidgets.QTextEdit(self.centralwidget)
        self.textSegment.setObjectName("textSegment")
        self.gridLayout_2.addWidget(self.textSegment, 1, 0, 1, 1)
        self.textSegment.setFont(font)
        self.textSegment.setReadOnly(True)
        #self.segmentHighligther = Highlighter(self.textSegment.document())
        self.textSegment.verticalScrollBar().setStyleSheet('QScrollBar {width:0px;}')


        # Make characters in hex value uppercase
        charFormat = QTextCharFormat()
        charFormat.setFontCapitalization(QFont.Capitalization.AllUppercase)

        
        # TEXT HEX VALUE CONFIG
        self.textHexValue = QtWidgets.QTextEdit(self.centralwidget)
        self.textHexValue.setObjectName("textHexValue")
        self.gridLayout_2.addWidget(self.textHexValue, 1, 1, 1, 1)
        #self.hexValueHighlighter = Highlighter(self.textHexValue.document())
        self.textHexValue.setFont(font)
        self.textHexValue.setMouseTracking(True)
        self.textHexValue.verticalScrollBar().setStyleSheet('QScrollBar {width:0px;}') 
        #self.textHexValue.selectionChanged.connect(self.hexValueSelectedBehavior)
        #self.textHexValue.cursorPositionChanged.connect(self.hexValueCursorBehavior)
        self.defaultHexKeyPressEvent = self.textHexValue.keyPressEvent
        self.textHexValue.keyPressEvent = self.hexKeyPressEvent
        self.defaultHexMouseEvent = self.textHexValue.mousePressEvent
        self.textHexValue.mousePressEvent = self.hexClickInEvent
        #self.textHexValue.focusInEvent = self.hexFocusInEvent
        self.textHexValue.setReadOnly(False)
        self.textHexValue.setOverwriteMode(True)
        self.textHexValue.setCurrentCharFormat(charFormat)

        self.gridLayout_2.setColumnMinimumWidth(0, 1)
        self.gridLayout_2.setColumnMinimumWidth(1, 3)
        self.gridLayout_2.setColumnMinimumWidth(2, 1)
        self.gridLayout_2.setRowMinimumHeight(0, 1)
        self.gridLayout_2.setRowMinimumHeight(1, 16)
        self.gridLayout_2.setColumnStretch(0, 3)
        self.gridLayout_2.setColumnStretch(1, 16)
        self.gridLayout_2.setColumnStretch(2, 4)
        self.gridLayout_2.setRowStretch(0, 1)
        self.gridLayout_2.setRowStretch(1, 18)

        self.verticalLayout.addLayout(self.gridLayout_2)

        MainWindow.setCentralWidget(self.centralwidget)
        # MENU BAR
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1000, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        # self.menuHelp = QtWidgets.QMenu(self.menubar)
        # self.menuHelp.setObjectName("menuHelp")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        MainWindow.setMenuBar(self.menubar)

        # MENU BAR - ACTION BUTTONS
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionReadMode = QtWidgets.QAction(MainWindow)
        self.actionReadMode.setObjectName("actionReadMode")
        self.actionEditMode = QtWidgets.QAction(MainWindow)
        self.actionEditMode.setObjectName("actionEditMode")
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionExit)
        self.menuEdit.addAction(self.actionReadMode)
        self.menuEdit.addAction(self.actionEditMode)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        # self.menubar.addAction(self.menuHelp.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())

        self.toggle_edit_sc = QShortcut(QKeySequence('Ctrl+E'), MainWindow)
        self.toggle_edit_sc.activated.connect(self.enter_edit_mode)

        self.toggle_read_sc = QShortcut(QKeySequence('Ctrl+R'), MainWindow)

        self.toggle_read_sc.activated.connect(self.enter_read_mode)

        self.actionOpen.triggered.connect(self.open_file_click)
        self.actionSave.triggered.connect(self.save_file_click)
        self.actionExit.triggered.connect(self.closeApp)

        self.actionReadMode.triggered.connect(self.toggle_read_mode)
        self.actionEditMode.triggered.connect(self.toggle_edit_mode)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #self.setLightTheme()
        self.printOffset()
        self.printAsciiOffset()
        self.syncScrollBars()

    def open_file_click(self,s):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        file_path, _ = QFileDialog.getOpenFileName(self.centralwidget,'Open file','','','All files (*);',options=options)
        data = None
        if file_path=='':
            return
        with open(file_path, 'rb') as file:
            data = file.read()

        self.loadFile(data)

    def save_file_click(self,s):
        hex_string = self.textHexValue.toPlainText()
        hex_bytes = utils.string_to_hex(hex_string)
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.DontUseNativeDialog
        file_path,_ =  QFileDialog.getSaveFileName(self.centralwidget,'Save file','','','All files (*)',options=options)
        if file_path:
            with open(file_path,'wb') as file:
                file.write(hex_bytes)
        else:
            print('File saving canceled')
        #print(hex_values)

    def toggle_read_mode(self,s):
        self.enter_read_mode()

    def toggle_edit_mode(self,s):
        self.enter_edit_mode()

    def enter_read_mode(self):
        self.textHexValue.setReadOnly(True)
        self.textHexValue.mousePressEvent = self.defaultHexMouseEvent
        self.textHexValue.keyPressEvent = None

    def enter_edit_mode(self):
        self.textHexValue.setReadOnly(False)
        self.textHexValue.mousePressEvent = self.hexClickInEvent
        self.textHexValue.keyPressEvent = self.hexKeyPressEvent
        

####################################################
#################FOCUS IN EVENTS####################
####################################################

    def offsetFocusInEvent(self,event):
        print('Offset focus in')
        pass


    def hexClickInEvent(self,event):
        #QTextEdit.focusInEvent(self.textHexValue,event)
        mouse_position = QMouseEvent.pos(QMouseEvent(event))
        cursor = self.textHexValue.cursorForPosition(mouse_position)
        cursor.movePosition(QTextCursor.MoveOperation.StartOfWord, QTextCursor.MoveMode.MoveAnchor)
        self.textHexValue.setTextCursor(cursor)
        self.textHexValue.setCursorWidth(10)
        self.textHexValue.ensureCursorVisible()
        cursor_position = cursor.position()
        self.trigger_all_selections(cursor_position,'')
    
    def asciiClickInEvent(self,event):
        QTextEdit.mousePressEvent(self.textAsciValue,event)
        # mouse_position = QMouseEvent.pos(QMouseEvent(event))
        # cursor = self.textHexValue.cursorForPosition(mouse_position)
        # self.textAsciValue.setTextCursor(cursor)
        self.textAsciValue.setCursorWidth(10)
        self.textAsciValue.ensureCursorVisible()
        cursor = self.textAsciValue.textCursor()
        cursor_position = cursor.position()
        self.detrigger_selections()
    

        


    def closeApp(self,s):
        self.mainWindow.close()
        

    def hexKeyPressEvent(self, e):
        text = e.text()
        cursor = self.textHexValue.textCursor()
        changed_byte = ''
        # Handle pressed key
        if (e.key()>47 and e.key()<58) or (e.key()>64 and e.key()<71) or (e.key()>96 and e.key()<103):
            QTextEdit.keyPressEvent(self.textHexValue,e)

            is_end_of_byte = utils.is_end_of_byte(cursor.position())
            is_end_of_line = utils.is_end_of_line(cursor.position())
            position = cursor.position()
            byte_position = utils.get_byte_position(position)
            hex_text = self.textHexValue.toPlainText()
            changed_byte = hex_text[byte_position:byte_position+2]
            print('Hex text:',changed_byte)
            if is_end_of_line:
                cursor.movePosition(QTextCursor.MoveOperation.NextRow,QTextCursor.MoveMode.MoveAnchor)
                cursor.movePosition(QTextCursor.MoveOperation.Right,QTextCursor.MoveMode.MoveAnchor)
                cursor.movePosition(QTextCursor.MoveOperation.NextWord,QTextCursor.MoveMode.MoveAnchor)
            if is_end_of_byte:
                cursor.movePosition(QTextCursor.MoveOperation.NextWord,QTextCursor.MoveMode.MoveAnchor)   
        elif e.key() == Qt.Key.Key_Down:
            cursor.movePosition(QTextCursor.MoveOperation.Down,QTextCursor.MoveMode.MoveAnchor)
        elif e.key() == Qt.Key.Key_Up:
            cursor.movePosition(QTextCursor.MoveOperation.Up,QTextCursor.MoveMode.MoveAnchor)
        elif e.key() == Qt.Key.Key_Left:
            cursor.movePosition(QTextCursor.MoveOperation.PreviousWord,QTextCursor.MoveMode.MoveAnchor)
        elif e.key() == Qt.Key.Key_Right:
            cursor.movePosition(QTextCursor.MoveOperation.NextWord,QTextCursor.MoveMode.MoveAnchor)

        cursor_position = cursor.position()
        self.trigger_all_selections(cursor_position,changed_byte)
        self.textHexValue.setTextCursor(cursor)

    def asciiKeyPressEvent(self, e):
        cursor = self.textAsciValue.textCursor()
        position = cursor.position()
        changed_byte = ''
        # Handle pressed key
        if e.key()>32 and e.key()<127:
            print('Key value:',e.text())
            QTextEdit.keyPressEvent(self.textAsciValue,e)
            self.hexByteChanged(e.text(), position)
            #cursor.movePosition(QTextCursor.MoveOperation.Right,QTextCursor.MoveMode.MoveAnchor)
        elif e.key() == Qt.Key.Key_Down:
            cursor.movePosition(QTextCursor.MoveOperation.Down,QTextCursor.MoveMode.MoveAnchor)
        elif e.key() == Qt.Key.Key_Up:
            cursor.movePosition(QTextCursor.MoveOperation.Up,QTextCursor.MoveMode.MoveAnchor)
        elif e.key() == Qt.Key.Key_Left:
            cursor.movePosition(QTextCursor.MoveOperation.Left,QTextCursor.MoveMode.MoveAnchor)
        elif e.key() == Qt.Key.Key_Right:
            cursor.movePosition(QTextCursor.MoveOperation.Right,QTextCursor.MoveMode.MoveAnchor)

        cursor_position = cursor.position()
        self.textAsciValue.setTextCursor(cursor)

    def hexByteChanged(self, value, ascii_position):
        #print('ASCII position', ascii_position)
        print(type(value))
        row = ascii_position//17
        column = ascii_position%17
        hex_position = utils.get_hex_position(row,column)
        cursor = self.textHexValue.textCursor()
        cursor.setPosition(hex_position,QTextCursor.MoveMode.MoveAnchor)
        cursor.movePosition(QTextCursor.MoveOperation.EndOfWord,QTextCursor.MoveMode.KeepAnchor)
        hex_num = hex(ord(value))[2:]
        print('Hex num:',hex_num)
        hex_num = hex_num.zfill(2)
        cursor.insertText(hex_num)
            

    def hexValueSelectedBehavior(self):
        print('Selection Behaviour')


    def hexValueCursorBehavior(self):
        # asciiCursor = self.textAsciValue.textCursor()
        print('Cursor Behaviour')
        hexCursor = self.textHexValue.textCursor()
        position = hexCursor.position()
        

    def triggerSegmentSelection(self, row):
        # print('Segment Selection')
        # print(f'Segment row={row}')
        cursor = self.textSegment.textCursor()
        cursor.clearSelection()
        cursor.setPosition(row*15, QTextCursor.MoveMode.MoveAnchor)
        cursor.movePosition(QTextCursor.MoveOperation.EndOfLine, QTextCursor.MoveMode.KeepAnchor)
        self.textSegment.setTextCursor(cursor)

    def triggerOffsetSelection(self,begin,end):
        cursor = self.textOffset.textCursor()
        cursor.clearSelection()
        cursor.setPosition(begin,QTextCursor.MoveMode.MoveAnchor)
        cursor.setPosition(end, QTextCursor.MoveMode.KeepAnchor)
        self.textOffset.setTextCursor(cursor)

    def triggerAsciiOffsetSelection(self,column):
        cursor = self.textAsciiOffset.textCursor()
        cursor.clearSelection()
        cursor.setPosition(column,QTextCursor.MoveMode.MoveAnchor)
        cursor.movePosition(QTextCursor.MoveOperation.Right, QTextCursor.MoveMode.KeepAnchor)
        self.textAsciiOffset.setTextCursor(cursor)

    def triggerAsciiSelection(self,row,column,changed_byte:str):
        cursor = self.textAsciValue.textCursor()
        if changed_byte != '':
            ascii_character = bytearray.fromhex(changed_byte).decode()#changed_byte.decode('hex')
            print('decoded:',ascii_character)
            cursor.insertText(ascii_character)
        cursor.clearSelection()
        cursor.setPosition(row*17 + column, QTextCursor.MoveMode.MoveAnchor)
        cursor.movePosition(QTextCursor.MoveOperation.Right, QTextCursor.MoveMode.KeepAnchor)
        self.textAsciValue.setTextCursor(cursor)


        
    def trigger_all_selections(self,cursor_position,changed_byte):
        cursor_row = cursor_position//81
        cursor_column = utils.get_selection_column(cursor_position%81)

        self.triggerAsciiOffsetSelection(cursor_column)
        self.triggerAsciiSelection(cursor_row, cursor_column,changed_byte)
        #self.triggerOffsetSelection(cursor_position%81)
        self.triggerSegmentSelection(cursor_row)

    def detrigger_selections(self):
        cursor = self.textAsciiOffset.textCursor()
        cursor.clearSelection()
        self.textAsciiOffset.setTextCursor(cursor)

        cursor = self.textAsciValue.textCursor()
        cursor.clearSelection()
        self.textAsciValue.setTextCursor(cursor)
        
        cursor = self.textSegment.textCursor()
        cursor.clearSelection()
        self.textSegment.setTextCursor(cursor)

        cursor = self.textOffset.textCursor()
        cursor.clearSelection()
        self.textOffset.setTextCursor(cursor)

####################################################
#################RETRANSLATE UI#####################
####################################################


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Hex Editor"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.menuView.setTitle(_translate("MainWindow", "View"))
        #self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.menuAbout.setTitle(_translate("MainWindow", "About"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionReadMode.setText(_translate("MainWindow","Toggle Read Mode"))
        self.actionEditMode.setText(_translate("MainWindow","Toggle Edit Mode"))



####################################################
#############LOAD FILE AND PRINT CONTENT############
####################################################

    def loadFile(self, data):
        #numbers = generate_random_hex(1647)
        numbers = data
        self.printSegment(len(numbers))
        self.printHex(numbers)
        self.printAscii(numbers)

    def printOffset(self):
        offset_text = ' '*HEX_TEXT_INDENTATION
        for i in range(8):
            offset_text+= ' 0' + hex(i)[2:] + ' |'
        offset_text = offset_text[:-1]
        offset_text+=' '*2
        for i in range(8,16):
            offset_text+= ' 0' + hex(i)[2:] + ' |'
        self.textOffset.setText(offset_text[:-1].upper())

    def printAsciiOffset(self):
        offset_text=''
        for i in range(16):
            offset_text+=hex(i)[2:]
        self.textAsciiOffset.setText(offset_text.upper())

    def printSegment(self, number_of_bytes):
        number_of_segments = number_of_bytes // 16 + 1
        segment_text = ''
        for i in range(number_of_segments):
            segment_text = '\n'.join([segment_text,'{0:#0{1}X}0'.format(i,13)])
        self.textSegment.setText(segment_text[1:])

    def printHex(self,numbers):    
        num_rows = len(numbers)//16
        last_row = len(numbers)%16
        hex_string = ''
        for i in range(num_rows):
            row_string=' '*HEX_TEXT_INDENTATION
            for j in range(8):
                hex_num = hex(numbers[16*i + j])[2:]
                hex_num = hex_num.zfill(2) # if we got a number smaller than 0x10 we need to  fill one 0  f -> 0f
                row_string = ' '.join([row_string,hex_num.upper(),' '])
            row_string= row_string[:-1]
            row_string+= ' '*2

            for j in range(8,16):
                hex_num = hex(numbers[16*i + j])[2:]
                hex_num = hex_num.zfill(2) # if we got a number smaller than 0x10 we need to  fill one 0  f -> 0f
                row_string = ' '.join([row_string,hex_num.upper(),' '])
            row_string= row_string[:-1]
            hex_string='\n'.join([hex_string,row_string])

        row_string=' '*HEX_TEXT_INDENTATION
        for i in range(8 if last_row>8 else last_row):
            hex_num = hex(numbers[16*num_rows+i])[2:]
            hex_num = hex_num.zfill(2)
            row_string = ' '.join([row_string, hex_num.upper(),' '])

        if last_row>8:
            row_string= row_string[:-1]
            row_string+= ' '*2

            for j in range(8,last_row):
                hex_num = hex(numbers[16*num_rows + j])[2:]
                hex_num = hex_num.zfill(2) # if we got a number smaller than 0x10 we need to  fill one 0  f -> 0f
                row_string = ' '.join([row_string,hex_num.upper(),' '])

        row_string = row_string[:-1]
        hex_string='\n'.join([hex_string,row_string])
        hex_string = hex_string[1:]
        self.textHexValue.setText(hex_string)

    def printAscii(self,numbers):
        ascii_str=''
        num_rows = len(numbers)//16
        last_row = len(numbers)%16
        printable = set(string.printable)

        for i in range(num_rows):
            row_str=''
            for j in range(16):
                char = chr(numbers[i*16+j])
                char = char if char in string.printable else '.'
                row_str += char

            row_str = row_str.replace('\n','&')
            row_str = row_str.replace('\r\n','')
            row_str = row_str.replace('\r','.')
            # row_str = row_str.replace(' ','')
            row_str = row_str.replace('\t','.')
            row_str = row_str.replace('\v','.')
            row_str = row_str.replace('\f','.')
            ascii_str = '\n'.join([ascii_str,row_str])

        row_str=''
        for i in range(last_row):
            char = chr(numbers[16*num_rows+i])
            char = char if char in string.printable else '.'
            row_str += char

        row_str = row_str.replace('\n','&')
        row_str = row_str.replace('\r\n','')
        row_str = row_str.replace('\r','.')
        # row_str = row_str.replace(' ','')
        row_str = row_str.replace('\t','.')
        row_str = row_str.replace('\v','.')
        row_str = row_str.replace('\f','.')
        
        ascii_str='\n'.join([ascii_str,row_str])
        ascii_str=ascii_str[1:]
        self.textAsciValue.setText(ascii_str.encode('ascii',errors='replace').decode('ascii',errors='replace'))


####################################################
###############UI LOGIC CONFIGURATION###############
####################################################

    def syncScrollBars(self):
        segmentScrollBar = self.textSegment.verticalScrollBar()
        hexValScrollBar = self.textHexValue.verticalScrollBar()
        asciiValueScrollBar = self.textAsciValue.verticalScrollBar()

        segmentScrollBar.valueChanged.connect(lambda value: self.setScrollBars(value))
        hexValScrollBar.valueChanged.connect(lambda value: self.setScrollBars(value))
        asciiValueScrollBar.valueChanged.connect(lambda value: self.setScrollBars(value))

    def setScrollBars(self, value):
        segmentScrollBar = self.textSegment.verticalScrollBar()
        hexValScrollBar = self.textHexValue.verticalScrollBar()
        asciiValueScrollBar = self.textAsciValue.verticalScrollBar()

        segmentScrollBar.setValue(value)
        hexValScrollBar.setValue(value)
        asciiValueScrollBar.setValue(value)

    def setLightTheme(self):
        print('Set light theme')
        self.textAsciiOffset.setStyleSheet(style_sheets.textEditLightStyle)
        self.textAsciValue.setStyleSheet(style_sheets.textEditLightStyle)
        self.textHexValue.setStyleSheet(style_sheets.textEditLightStyle)
        self.textOffset.setStyleSheet(style_sheets.textEditLightStyle)
        self.textSegment.setStyleSheet(style_sheets.textEditLightStyle)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
